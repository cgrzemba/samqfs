/*
 *	pax_xhdr.h - Provides the implementation for a list of pax_pairs that
 * represents a pax extended header.  The pax_hdr code uses this to store
 * standardized fields with values that exceed the range of what fits in a
 * traditional ustar header block.
 */

/*
 *    SAM-QFS_notice_begin
 *
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").
 * You may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the license at pkg/OPENSOLARIS.LICENSE
 * or https://illumos.org/license/CDDL.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at pkg/OPENSOLARIS.LICENSE.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */
/*
 * Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
 * Use is subject to license terms.
 *
 *    SAM-QFS_notice_end
 */

#ifndef PAX_XHDR_H
#define	PAX_XHDR_H

#include <sys/types.h>

/* SAM-FS includes */
#include <pax_hdr/pax_pair.h>
#include <pax_hdr/pax_err.h>

/* Standard keywords defined by pax */
#define	PAX_STD_ATIME_KEYWORD "atime"
#define	PAX_STD_CHARSET_KEYWORD "charset"
#define	PAX_STD_COMMENT_KEYWORD "comment"
#define	PAX_STD_GID_KEYWORD "gid"
#define	PAX_STD_GNAME_KEYWORD "gname"
#define	PAX_STD_LINKPATH_KEYWORD "linkpath"
#define	PAX_STD_MTIME_KEYWORD "mtime"
#define	PAX_STD_PATH_KEYWORD "path"
#define	PAX_STD_SIZE_KEYWORD "size"
#define	PAX_STD_UID_KEYWORD "uid"
#define	PAX_STD_UNAME_KEYWORD "uname"

#define	PAX_XHDR_BLK_SIZE 512

/*
 * puts pair into a hdr_list.  Pax says you can have multiple keywords
 * in an extended header, and only the last is used.  Therefore, this allows
 * putting a pair in the list with a keyword that matches an existing pair.
 *
 * Returns the number of pairs with matching keyword if count_match != 0.
 * otherwise, returns 0.  The count is the number of pairs with the same
 * keyword *BEFORE* the insertion.  I.e. if the insertion is the first pair
 * with that keyword, the return value is 0.
 *
 * This function does not copy pair.  Ownership of pair transfers to hdr_list
 * after this call.
 *
 * -- IMPORTANT --
 * Adding the same pair twice will cause hangs and crashes.  Don't do it.
 * If thorough checks are turned on, this will attempt to guard against
 * duplicate insertions by making sure that pair isn't already in hdr_list.
 * The cost of this is > O(1) (O(n) in the current implementation).
 */
int
pxh_put_pair(
	pax_pair_t **hdr_list,
	pax_pair_t *pair,
	int count_match);

/*
 * Removes the most last pair from hdr_list with a keyword matching
 * keyword.  If all_match != 0, removes all matching pairs in hdr_list.
 * Ownership of the pair(s) removed transfers to the caller.
 */
pax_pair_t *
pxh_remove_pair(
	pax_pair_t **hdr_list,
	char *keyword,
	int *all_match);

/*
 * Returns the last pair in hdr_list with a keyword matching keyword.
 * Ownership of the pair remains with the list.
 *
 * If all_match != NULL, mallocs an array of pax_pair_t *, of the required
 * length, and returns the array of pax_pair_t *.
 * *all_match will be set to the number of pointers in the array returned.
 *
 * -- IMPORTANT: --
 * You cannot iterate over the array with the next pointers in the pairs.
 * The next pointers in the pairs still point to other members of the
 * hdr_list that are passed in.
 *
 * Ownership of the pairs is retained by hdr_list
 */
pax_pair_t **
pxh_get_pair(
	pax_pair_t *hdr_list,
	char *keyword,
	int *all_match);

/*
 * Calculates the size of the header that will be generated by mk_header.
 * The exact size and the 512 byte block padded size are both returned.  Size
 * does not include the size of the 'x' type ustar header block preceding the
 * ustar header.
 */
int
pxh_get_xheader_size(
	pax_pair_t *hdr_list,
	size_t *exact_size,
	size_t *pad_size);

/*
 * Writes the extened header data for hdr_list into a buffer specified by
 * buffer, and limited in size by buffer_len.
 */
int
pxh_write_xheader(
	pax_pair_t *hdr_list,
	char *buffer,
	size_t buffer_len);

/*
 * Turns a header in the buffer pointed to by buffer, of total size buffer_len
 * into a pair list returned in result_pairs.  The pair list that is returned
 * must be freed with pxh_pair_destroy
 */
int
pxh_mkpairs(
	pax_pair_t **result_pairs,
	char *buffer,
	size_t buffer_len);

/*
 * returns a count of the number of entries matching keyword in hdr_list.
 * Only the keyword is matched, value and type are ignored in making the
 * count.
 *
 * If keyword is NULL, returns the total number of pairs in the list without
 * trying to match anything.
 *
 * Returns the number of pairs in hdr_list that match keyword.
 */
int
pxh_count_matches(
	pax_pair_t *hdr_list,
	char *keyword);

#endif /* PAX_XHDR_H */
