/*
 *    SAM-QFS_notice_begin
 *
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").
 * You may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the license at pkg/OPENSOLARIS.LICENSE
 * or https://illumos.org/license/CDDL.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at pkg/OPENSOLARIS.LICENSE.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */
/*
 * Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
 * Use is subject to license terms.
 *
 *    SAM-QFS_notice_end
 */

// ident	$Id: SharedFSClientFilterPanel.js,v 1.2 2008/12/16 00:10:37 am143972 Exp $

var prefix = "SharedFSClientForm:pageTitle:tableClientSummary:filterPanel";
var show = 'visible';
var notShow = 'hidden';
var MAX_ENTRY = 3;


// // Toggle the filter panel from the filter menu.
//
// If the "Custom Filter" option has been selected, the filter panel is
// toggled. In this scenario, false is returned indicating the onChange event,
// generated by the filter menu, should not be allowed to continue.
//
// If the "Custom Filter Applied" option has been selected, no action is taken.
// Instead, the filter menu is reverted back to the original selection. In this
// scenario, false is also returned indicating the onChange event, generated by
// the filter menu, should not be allowed to continue.
//
// For all other selections, true is returned indicating the onChange event,
// generated by the filter menu, should be allowed to continue.
function filterMenuChanged() {
    var table = document.getElementById(
                    "SharedFSClientForm:pageTitle:tableClientSummary");
    var test = table.filterMenuChanged();
    return test;
}

// Use this function to toggle the filter panel open or closed. This
// functionality requires the filterId of the table component to be set. In
// addition, the selected value must be set as well to restore the default
// selected value when the embedded filter panel is closed.
function toggleFilterPanel() {
    var table = document.getElementById(
                    "SharedFSClientForm:pageTitle:tableClientSummary");
    table.toggleFilterPanel();
}

function handleFilterChange(menu) {
    if (menu.value == "customfilter") {
        filterMenuChanged();
        toggleFilterPanel();
        for (var i = 1; i <= MAX_ENTRY; i++) {
            resetAllItems(i);
        }
        return false;
    } else {
        return true;
    }
}

function resetAllItems(critNumber) {
    document.getElementById(
        prefix + ':menuFilterItems' + critNumber).options[0].selected = true;
    document.getElementById(
        prefix + ':menuFilterCondition' + critNumber).options[0].selected = true;
    document.getElementById(
        prefix + ':text' + critNumber).value="";
    document.getElementById(
        prefix + ':menu' + critNumber).options[0].selected = true;
}

function isCriteriaVisible(buttonId) {
    var visible =
        document.getElementById(
          prefix + ':div_crit' + buttonId + "_1").style.visibility == show;
    return visible;
}

function changeCriteriaState(critNumber, visible) {
    if (critNumber > MAX_ENTRY) {
        // should not happen
        alert("bad critNumber entered!");
    } else {
        // reset menu items if visible is set to false
        if (!visible) {
            resetAllItems(critNumber);
        }

        // reset condition menu
        populateConditionMenu(true, critNumber);
        populateMenu(true, critNumber);

        document.getElementById(
            prefix + ':div_crit' + critNumber + "_1").style.visibility=
                visible ? show : notShow;
        document.getElementById(
            prefix + ':div_crit' + critNumber + "_2").style.visibility=
                visible ? show : notShow;
        document.getElementById(
            prefix + ':text' + critNumber).style.visibility=
                visible ? show : notShow;
        document.getElementById(
            prefix + ':menu' + critNumber).style.visibility=notShow;
    }
}

function handleAddButton(button) {
    var nameArray = button.id.split(prefix + ':addButton');
    var nextToAdd = parseInt(nameArray[1]) + 1;
    var msg = document.getElementById(prefix + ':errmsg_atmost').value;
    if (nextToAdd == MAX_ENTRY + 1) {
        alert(msg);
    } else {
        for (var i=nextToAdd; i<=MAX_ENTRY; i++) {
            if (!isCriteriaVisible(i)) {
                changeCriteriaState(i, true);
                return;
            }
        }
        alert(msg);
    }
}

function getMenuValue(menuId, critNumber) {
    var menu = document.getElementById(
        prefix + ':' + menuId + critNumber);
    return menu.selectedIndex;
}

function setMenuValue(menuId, critNumber, value) {
    var menu = document.getElementById(
        prefix + ':' + menuId + critNumber);
    menu.selectedIndex = value;
}

function moveContent(orig, dest) {
    setMenuValue(
        'menuFilterItems',
        dest,
        getMenuValue('menuFilterItems', orig));

    filterValue = getMenuValue('menuFilterItems', dest);

    document.getElementById(
        prefix + ':menu' + dest).style.visibility=
             (filterValue == "status" ? show : notShow);
    document.getElementById(
        prefix + ':text' + dest).style.visibility=
             (filterValue != "status" ? show : notShow);
    populateConditionMenu(filterValue != "status", dest);
    populateMenu(filterValue != "type", dest);

    setMenuValue(
        'menuFilterCondition',
        dest,
        getMenuValue('menuFilterCondition', orig));

    setMenuValue(
        'menu',
        dest,
        getMenuValue('menu', orig));

    document.getElementById(
        prefix + ':text' + dest).value =
    document.getElementById(
        prefix + ':text' + orig).value;
}

function handleRemoveButton(button) {
    var nameArray = button.id.split(prefix + ':removeButton');
    var buttonId = parseInt(nameArray[1]);

    // Last criteria
    if (buttonId == MAX_ENTRY) {
        changeCriteriaState(buttonId, false);

    // Not the last criteria, check to see if we need to copy the next criteria
    // up to this criteria, and hide the criteria at the bottom
    } else {
        for (var i=MAX_ENTRY; i>buttonId; i--) {
            if (isCriteriaVisible(i)) {
                moveContent(i, buttonId);
                changeCriteriaState(i, false);
                return;
            }
        }

        if (buttonId == 1) {
            var msg = document.getElementById(prefix + ':errmsg_atleast').value;
            alert(msg);
        } else {
            changeCriteriaState(buttonId, false);
        }
    }
}

function populateConditionMenu(normal, critNumber) {
    var menu =
        document.getElementById(prefix + ':menuFilterCondition' + critNumber);
    for (var i = menu.options.length; i >= 1; i--) {
        menu.options[i] = null;
    }
    var menuArray =
        normal ?
            document.getElementById(prefix + ':condition1').value.split("###") :
            document.getElementById(prefix + ':condition2').value.split("###");
    for (i = 0; i < menuArray.length; i++) {
        menu.options[i] = new Option(menuArray[i], menuArray[i]);
    }
}

function populateMenu(normal, critNumber) {
    var menu =
        document.getElementById(prefix + ':menu' + critNumber);
    for (var i = menu.options.length; i >= 1; i--) {
        menu.options[i] = null;
    }
    var menuArray =
        normal ?
            document.getElementById(prefix + ':menuContent1').value.split("###") :
            document.getElementById(prefix + ':menuContent2').value.split("###");
    var menuValueArray =
        normal ?
            document.getElementById(prefix + ':menuContentValue1').value.split("###") :
            document.getElementById(prefix + ':menuContentValue2').value.split("###");
    for (i = 0; i < menuArray.length; i++) {
        menu.options[i] = new Option(menuArray[i], menuValueArray[i]);
    }
}


function handleMenuFilterItemsChange(menu) {
    var nameArray = menu.id.split(prefix + ':menuFilterItems');
    var critNumber = parseInt(nameArray[1]);

    // If "Status" is selected, show status drop down, else show text field
    document.getElementById(
        prefix + ':menu' + critNumber).style.visibility=
             (menu.value == "status" || menu.value == "type" ? show : notShow);
    document.getElementById(
        prefix + ':text' + critNumber).style.visibility=
             (menu.value != "status" && menu.value != "type" ? show : notShow);

    // Change filter condition menu to the appropriate content
    populateConditionMenu(
        menu.value != "status" && menu.value != "type", critNumber);

    // Change menu selection to the appropriate content
    populateMenu(menu.value != "type", critNumber);
}

function handleOkButton() {
    var submitValue = "";
    var delimiter = ",";

    for (var i = 1; i <= MAX_ENTRY; i++) {
        if (i > 1) {
            submitValue += delimiter;
        }
        if (isCriteriaVisible(i)) {
            submitValue += "true";
        } else {
            submitValue += "false";
        }
    }
    document.getElementById(prefix + ':submitValue').value = submitValue;
}
